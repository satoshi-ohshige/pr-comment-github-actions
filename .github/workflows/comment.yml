on:
  issue_comment:
    types: [created, edited]

env:
  DEFAULT_BRANCH: main
  ALLOWED_ENVIRONMENT_LIST: test,stage,prod
  AWS_IAM_ROLE_DEV: iam-role-dev
  AWS_IAM_ROLE_PROD: iam-role-prod
  PROD_ENVIRONMENT_LIST: stage,prod
  CODEPIPELINE_NAME: prod-pipeline
  CODEPIPELINE_ARTIFACT_SOURCE_NAME: source_output
  CODEPIPELINE_APPROVAL_STAGE_NAME: prod-pipeline-approval
  CODEPIPELINE_APPROVAL_NAME: Approval

jobs:
  deploy:
    # PRコメントであり且つ /deploy で始まるときのみ動作させる
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy')
    runs-on: ubuntu-latest

    steps:
#      # https://github.com/slackapi/slack-github-action
#      - name: Notify to Slack
#        uses: slackapi/slack-github-action@v1.18.0
#        env:
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_INCOMING_WEBHOOK_URL }}
#        with:
#          payload: |
#            {
#              "attachments": [
#                {
#                  "color": "#5c92f0",
#                  "blocks": [
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "*soudan-counselor-web*\n_tanaka-taro_ deploying to *prod*"
#                      }
#                    },
#                    {
#                      "type": "section",
#                      "text": {
#                        "type": "mrkdwn",
#                        "text": "ほげほげな修正です\nhttps://github.com/slackapi/slack-github-action/pull/61"
#                      }
#                    }
#                  ]
#                }
#              ]
#            }

      - name: Print trigger comment
        run: |
          echo "${{ github.event.comment.user.login }}"

#      # 動作していることを表すためにまずリアクションする
#      - name: Add reaction for start
#        uses: actions/github-script@v5
#        with:
#          script: |
#            github.rest.reactions.createForIssueComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              comment_id: context.payload.comment.id,
#              content: 'eyes'
#            })
#
      # "/deploy prod" における prod などのデプロイ先環境を取り出す
#      - name: Get target environment
#        id: get-environment
#        run: echo "::set-output name=target_environment::$(echo ${{ github.event.comment.body }} | cut -d ' ' -f 2)"
#
#      - name: Get target environment 2
#        id: get-environment
#        run: echo "::set-output name=target_environment::$(echo ${{ format('"{0}"', github.event.comment.body) }} | cut -d ' ' -f 2)"

#      - name: Get target environment 3
#        id: get-environment
#        run: echo "::set-output name=target_environment::$(echo ${{ toJson(github.event.comment.body) }} | cut -d ' ' -f 2 | tr -d "\r\n\t")"

      - name: Get target environment 3
        run: echo ${{ toJson(github.event.comment.body) }} | cut -d ' ' -f 2 | sed -e 's/\r//g' -e 's/\n//g' -e 's/\t//g'

#      # 指定されたデプロイ先環境が正常な値であることを確認し、不正であればその旨を出力する
#      - name: Verify target & Notify if invalid
#        id: verify-target
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const { ALLOWED_ENVIRONMENT_LIST } = process.env
#
#            const target_environment = '${{ steps.get-environment.outputs.target_environment }}'
#
#            if (ALLOWED_ENVIRONMENT_LIST.split(',').includes(target_environment)) {
#                return true
#            }
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: "failed :flushed: \nusage: `/deploy [" + ALLOWED_ENVIRONMENT_LIST + "]`"
#            })
#
#            return false
#
#      # 直前の検証で不正であれば、終了する
#      - name: Stop if invalid
#        if: steps.verify-target.outputs.result == 'false'
#        run: exit 1
#
#      # デプロイに必要な情報や実行者などをまとめる
#      - name: Fetch target branch
#        id: target-branch
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const pull_request = await github.rest.pulls.get({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: context.issue.number
#            })
#            console.log(pull_request)
#
#            return {
#              url: pull_request.data.html_url,
#              title: pull_request.data.title,
#              user: pull_request.data.user.login,
#              branch: pull_request.data.head.ref,
#              sha: pull_request.data.head.sha,
#              base: pull_request.data.base.ref,
#              merged: pull_request.data.merged,
#              merge_commit_sha: pull_request.data.merge_commit_sha
#            }
#
#      - name: checkout repository
#        uses: actions/checkout@v2
#        with:
#          ref: ${{ fromJSON(steps.target-branch.outputs.result).sha }}
#          fetch-depth: 0
#
#      - name: echo json file
#        id: codepipeline
#        run: |
#          echo "- get-pipeline-stateコマンドで現在のパイプラインの状態を取得する"
#          cat get-pipeline-state.json
#
#          echo "- 現在のApprovalステージのパイプライン実行IDを抽出する(デプロイを行いたいPRと現在のApprovalのトリガーとなったPRが同一であることを確認するため)"
#          cat get-pipeline-state.json \
#            | jq -r '.stageStates | .[] | select(.stageName == "${{ env.CODEPIPELINE_APPROVAL_STAGE_NAME }}") | .latestExecution.pipelineExecutionId' \
#            > approval_pipeline_execution_id
#          cat approval_pipeline_execution_id
#
#          echo "- 現在のApprovalステージの実行状態を抽出する(承認待ちである必要があるため)"
#          cat get-pipeline-state.json \
#            | jq -r '.stageStates | .[] | select(.stageName == "${{ env.CODEPIPELINE_APPROVAL_STAGE_NAME }}") | .actionStates | .[] | select(.actionName == "${{ env.CODEPIPELINE_APPROVAL_NAME }}") | .latestExecution.status' \
#            > approval_stage_status
#          cat approval_stage_status
#
#          echo "- 現在のApprovalステージを承認するためのトークンを抽出する"
#          cat get-pipeline-state.json \
#            | jq -r '.stageStates | .[] | select(.stageName == "${{ env.CODEPIPELINE_APPROVAL_STAGE_NAME }}") | .actionStates | .[] | select(.actionName == "${{ env.CODEPIPELINE_APPROVAL_NAME }}") | .latestExecution.token' \
#            > approval_token
#          cat approval_token
#
#          echo "- get-pipeline-executionコマンドで現在のApprovalステージのパイプライン情報を取得する"
#          cat get-pipeline-execution.json
#
#          echo "- 現在のApprovalのトリガーとなったコミットIDを抽出する(デプロイを行いたいPRと同一であることを確認するため)"
#          cat get-pipeline-execution.json \
#            | jq -r '.pipelineExecution.artifactRevisions | .[] | select(.name == "${{ env.CODEPIPELINE_ARTIFACT_SOURCE_NAME }}") | .revisionId' \
#            > approval_revision_id
#          cat approval_revision_id
#
#          echo "- 現在のApprovalのトリガーとなったコミットメッセージを抽出する(トリガーとなったPRについて容易に判断できるようにするため)"
#          cat get-pipeline-execution.json \
#            | jq -r '.pipelineExecution.artifactRevisions | .[] | select(.name == "${{ env.CODEPIPELINE_ARTIFACT_SOURCE_NAME }}") | .revisionSummary' \
#            | jq '.CommitMessage' \
#            > approval_revision_commit_message
#          cat approval_revision_commit_message
#
#          echo "::set-output name=approval_pipeline_execution_id::$(cat approval_pipeline_execution_id)"
#          echo "::set-output name=approval_stage_status::$(cat approval_stage_status)"
#          echo "::set-output name=approval_token::$(cat approval_token)"
#          echo "::set-output name=approval_revision_id::$(cat approval_revision_id)"
#          echo "::set-output name=approval_revision_commit_message::$(cat approval_revision_commit_message)"
#
#      - name: verify approval
#        id: verify-approval
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const { CODEPIPELINE_NAME } = process.env
#
#            const approval_revision_id = '${{ steps.codepipeline.outputs.approval_revision_id }}'
#            const approval_stage_status = '${{ steps.codepipeline.outputs.approval_stage_status }}'
#            const merge_commit_sha = '${{ fromJSON(steps.target-branch.outputs.result).merge_commit_sha }}'
#
#            const codepipeline_summary_url = `https://ap-northeast-1.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CODEPIPELINE_NAME}/view?region=ap-northeast-1`
#            const approval_revision_github_url = "https://github.com/${{ github.repository }}/commit/" + approval_revision_id
#
#            if (approval_stage_status != 'InProgress') {
#              github.rest.issues.createComment({
#                issue_number: context.issue.number,
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                body: "failed :thinking: \n承認待ちのデプロイがありません。すべてデプロイ済みかソースの用意が済んでいない可能性があります。\n"
#                      + `現在のCodePipelineの各ステージの状態は [コチラ](${codepipeline_summary_url})`
#              })
#              return false
#            }
#
#            if (approval_revision_id != merge_commit_sha) {
#              github.rest.issues.createComment({
#                issue_number: context.issue.number,
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                body: "failed :thinking: \n承認待ちのデプロイがこのPRを対象としたものではありません。\n他のPRでマージ後にデプロイ作業もしくはApproval却下作業が行われていない可能性があります。\n\n"
#                      + `トリガーとなった [マージコミット](${approval_revision_github_url}) は以下です。\n`
#                      + "```\n" + ${{ steps.codepipeline.outputs.approval_revision_commit_message }} + "\n```\n\n"
#                      + `現在のCodePipelineの各ステージの状態は [コチラ](${codepipeline_summary_url})`
#              })
#              return false
#            }
#
#            return true
#
#      - name: Stop if invalid
#        if: steps.verify-approval.outputs.result == 'false'
#        run: exit 1

#
#      # 本番環境へのデプロイであればマージ先がデフォルトブランチであり且つPRがマージ済みであることを確認し、満たしていなければその旨を出力する
#      - name: Verify deployment production & Notify if invalid
#        id: verify-deployment-production
#        if: steps.get-environment.outputs.target_environment == 'prod'
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const { DEFAULT_BRANCH } = process.env
#
#            const base_branch = '${{ fromJson(steps.target-branch.outputs.result).base }}'
#            const merged = '${{ fromJson(steps.target-branch.outputs.result).merged }}'
#
#            if (DEFAULT_BRANCH == base_branch && merged == 'true') {
#                return true
#            }
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: "failed :cold_sweat: \n本番環境へデプロイするためには、マージ先ブランチが `" + DEFAULT_BRANCH + "` であり、マージ済みでないといけません"
#            })
#
#            return false
#
#      # 直前の検証で不正であれば、終了する
#      - name: Stop if invalid
#        if: steps.verify-deployment-production.outputs.result == 'false'
#        run: exit 1
#
#      # デプロイ先のアカウントとデプロイするコミットSHAを用意する
#      - name: Prepare account and commit sha
#        id: prepare-deployment-info
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const { AWS_IAM_ROLE_DEV, AWS_IAM_ROLE_PROD, PROD_ENVIRONMENT_LIST } = process.env
#
#            const target_environment = '${{ steps.get-environment.outputs.target_environment }}'
#
#            let aws_iam_role = AWS_IAM_ROLE_DEV
#            if (PROD_ENVIRONMENT_LIST.split(',').includes(target_environment)) {
#              aws_iam_role = AWS_IAM_ROLE_PROD
#            }
#
#            let commit_sha = '${{ fromJSON(steps.target-branch.outputs.result).sha }}'
#            if (target_environment == 'prod') {
#              const commit_list = await github.rest.repos.listCommits({
#                owner: context.repo.owner,
#                repo: context.repo.repo,
#                per_page: 1
#              })
#
#              commit_sha = commit_list.data[0].sha
#            }
#
#            return {
#              aws_iam_role: aws_iam_role,
#              commit_sha: commit_sha
#            }
#
#      # (仮) ここで、 aws cli でデプロイ開始予定
#      - name: Start Deploying
#        run: echo "Start Deploying! role:${{fromJSON(steps.prepare-deployment-info.outputs.result).aws_iam_role}} sha:${{fromJSON(steps.prepare-deployment-info.outputs.result).commit_sha}}"
#
#      # デプロイ開始完了とAWSへのリンクを出力する
#      - name: Finished
#        uses: actions/github-script@v5
#        with:
#          script: |
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: "デプロイを開始しました！ :rocket: \n https://ap-northeast-1.console.aws.amazon.com/codesuite/codedeploy/deployments/d-XXXXXXXXX?region=ap-northeast-1"
#            })
#
#      # (仮) ここで、誰がどこに何をデプロイしたかSlackに通知予定
#      - name: Notify to Slack
#        run: echo "url:${{fromJSON(steps.target-branch.outputs.result).url}} title:${{fromJSON(steps.target-branch.outputs.result).title}} user:${{fromJSON(steps.target-branch.outputs.result).user}}"
#
#      # 何かに失敗した場合はそれがわかるようにリアクションする
#      - name: Add reaction for failure
#        if: failure()
#        uses: actions/github-script@v5
#        with:
#          script: |
#            github.rest.reactions.createForIssueComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              comment_id: context.payload.comment.id,
#              content: 'confused'
#            })
